// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.15.5
// source: rules.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RuleEngineService_ExecuteRule_FullMethodName  = "/drools.RuleEngineService/ExecuteRule"
	RuleEngineService_AddRule_FullMethodName      = "/drools.RuleEngineService/AddRule"
	RuleEngineService_ExecuteRules_FullMethodName = "/drools.RuleEngineService/ExecuteRules"
)

// RuleEngineServiceClient is the client API for RuleEngineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 规则引擎服务定义
type RuleEngineServiceClient interface {
	// 执行规则
	ExecuteRule(ctx context.Context, in *RuleRequest, opts ...grpc.CallOption) (*RuleResponse, error)
	// 添加新规则
	AddRule(ctx context.Context, in *AddRuleRequest, opts ...grpc.CallOption) (*AddRuleResponse, error)
	// 批量执行规则
	ExecuteRules(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RuleRequest, RuleResponse], error)
}

type ruleEngineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleEngineServiceClient(cc grpc.ClientConnInterface) RuleEngineServiceClient {
	return &ruleEngineServiceClient{cc}
}

func (c *ruleEngineServiceClient) ExecuteRule(ctx context.Context, in *RuleRequest, opts ...grpc.CallOption) (*RuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, RuleEngineService_ExecuteRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleEngineServiceClient) AddRule(ctx context.Context, in *AddRuleRequest, opts ...grpc.CallOption) (*AddRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRuleResponse)
	err := c.cc.Invoke(ctx, RuleEngineService_AddRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleEngineServiceClient) ExecuteRules(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RuleRequest, RuleResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RuleEngineService_ServiceDesc.Streams[0], RuleEngineService_ExecuteRules_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RuleRequest, RuleResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RuleEngineService_ExecuteRulesClient = grpc.BidiStreamingClient[RuleRequest, RuleResponse]

// RuleEngineServiceServer is the server API for RuleEngineService service.
// All implementations must embed UnimplementedRuleEngineServiceServer
// for forward compatibility.
//
// 规则引擎服务定义
type RuleEngineServiceServer interface {
	// 执行规则
	ExecuteRule(context.Context, *RuleRequest) (*RuleResponse, error)
	// 添加新规则
	AddRule(context.Context, *AddRuleRequest) (*AddRuleResponse, error)
	// 批量执行规则
	ExecuteRules(grpc.BidiStreamingServer[RuleRequest, RuleResponse]) error
	mustEmbedUnimplementedRuleEngineServiceServer()
}

// UnimplementedRuleEngineServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRuleEngineServiceServer struct{}

func (UnimplementedRuleEngineServiceServer) ExecuteRule(context.Context, *RuleRequest) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteRule not implemented")
}
func (UnimplementedRuleEngineServiceServer) AddRule(context.Context, *AddRuleRequest) (*AddRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRule not implemented")
}
func (UnimplementedRuleEngineServiceServer) ExecuteRules(grpc.BidiStreamingServer[RuleRequest, RuleResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteRules not implemented")
}
func (UnimplementedRuleEngineServiceServer) mustEmbedUnimplementedRuleEngineServiceServer() {}
func (UnimplementedRuleEngineServiceServer) testEmbeddedByValue()                           {}

// UnsafeRuleEngineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleEngineServiceServer will
// result in compilation errors.
type UnsafeRuleEngineServiceServer interface {
	mustEmbedUnimplementedRuleEngineServiceServer()
}

func RegisterRuleEngineServiceServer(s grpc.ServiceRegistrar, srv RuleEngineServiceServer) {
	// If the following call pancis, it indicates UnimplementedRuleEngineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RuleEngineService_ServiceDesc, srv)
}

func _RuleEngineService_ExecuteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleEngineServiceServer).ExecuteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleEngineService_ExecuteRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleEngineServiceServer).ExecuteRule(ctx, req.(*RuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleEngineService_AddRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleEngineServiceServer).AddRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleEngineService_AddRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleEngineServiceServer).AddRule(ctx, req.(*AddRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleEngineService_ExecuteRules_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RuleEngineServiceServer).ExecuteRules(&grpc.GenericServerStream[RuleRequest, RuleResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RuleEngineService_ExecuteRulesServer = grpc.BidiStreamingServer[RuleRequest, RuleResponse]

// RuleEngineService_ServiceDesc is the grpc.ServiceDesc for RuleEngineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuleEngineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drools.RuleEngineService",
	HandlerType: (*RuleEngineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteRule",
			Handler:    _RuleEngineService_ExecuteRule_Handler,
		},
		{
			MethodName: "AddRule",
			Handler:    _RuleEngineService_AddRule_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteRules",
			Handler:       _RuleEngineService_ExecuteRules_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rules.proto",
}
